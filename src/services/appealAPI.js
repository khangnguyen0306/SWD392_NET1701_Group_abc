import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BE_API_LOCAL } from "../config";

// Define a service using a base URL and expected endpoints
export const appealApi = createApi({
  reducerPath: "appealManagement",
  // Tag types are used for caching and invalidation.
  tagTypes: ["AppealList"],
  baseQuery: fetchBaseQuery({
    baseUrl: BE_API_LOCAL,
    prepareHeaders: (headers, { getState }) => {
      const token = localStorage.getItem('token'); // Or any other method to get the token
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    }
  }),
  endpoints: (builder) => ({
    getAppeals: builder.query({
      query: () => `appeal/getall`,
      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "Appeal", id })),
              { type: "Appeal", id: "LIST" },
            ]
          : [{ type: "Appeal", id: "LIST" }],
    }),
    getAppealById: builder.query({
      query: (id) => `appeal/getappealbyid/${id}`,
      providesTags: (result, _error, id) => [{ type: "Appeal", id }],
    }),
    addAppeal: builder.mutation({
      query: ({ userId, ...body }) => {
        return {
          method: "POST",
          url: `/appeal/addappeal?userId=${userId}`, // Ensure this matches your server's endpoint
          body,
          responseHandler: (response) => response.text(),
        };
      },
      invalidatesTags: [{ type: "Appeal", id: "LIST" }],
    }),
    acceptAppeal: builder.mutation({
      query: (id) => {
        return {
          method: "POST",
          url: `appeal/acceptappeal/${id}`,
        };
      },
      invalidatesTags: (res, err, id) => [{ type: "Appeal", id }],
    }),
    updateAppeal: builder.mutation({
      query: (payload) => {
        return {
          method: "PUT",
          url: `appeal/updateappeal/${payload.id}`,
          body: payload.body,
        };
      },
      invalidatesTags: (res, err, arg) => [{ type: "Appeal", id: arg.id }],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetAppealsQuery,
  useGetAppealByIdQuery,
  useAddAppealMutation,
  useAcceptAppealMutation,
  useUpdateAppealMutation,
} = appealApi;
